{"version":3,"sources":["components/header.js","components/footer.js","assets/currentLocation.svg","assets/restaurantMarker.svg","components/map.js","components/modal.js","assets/filledStar.svg","assets/emptyStar.svg","components/ratings.js","components/restaurants/card.js","components/restaurants/index.js","pages/index.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Footer","google","window","Map","userLocation","restaurantLocation","getCurrentLocation","setLocation","restaurants","getDirection","mapRef","useRef","searchBox","userLatlng","maps","LatLng","latitude","longitude","directionService","DirectionsRenderer","useEffect","initGoogleMap","map","current","zoom","center","Marker","position","title","icon","url","restaurantIcon","size","Size","origin","Point","anchor","scaledSize","forEach","name","location","lat","lng","animation","Animation","DROP","selectedAddress","setMap","drawRoute","bounds","LatLngBounds","extend","fitBounds","initSearchBox","DirectionsService","route","destination","travelMode","response","status","setDirections","console","log","input","autocomplete","places","Autocomplete","setFields","addListener","place","getPlace","geometry","value","formatted_address","ref","type","placeholder","onClick","src","currentLocation","alt","classnames","areEqual","prevProps","nextProps","deepEqual","React","memo","Modal","toogleModal","restaurant","vicinity","tabIndex","role","style","display","cursor","Ratings","ratingsWidth","rating","Math","round","width","Array","fill","_","index","EmptyStar","FilledStar","Card","selectedRestaurant","changeRestaurant","useState","direction","showDirection","id","user_ratings_total","photos","price_level","displayDirection","restaurantId","classes","height","NoRestaurants","Restaurants","length","Home","setRestaurants","pagination","setPagination","radius","searchParams","setSearchParams","useCallback","navigator","geolocation","getCurrentPosition","coords","service","PlacesService","document","getElementById","request","nearbySearch","results","PlaceSearchPagination","availableRestaurants","PlacesServiceStatus","OK","place_id","opening_hours","reference","getUrl","isOpen","open_now","undefined","hasNextPage","updateSearch","event","target","prevState","onChange","htmlFor","min","step","max","toFixed","nextPage","App","Boolean","hostname","match","ReactDOM","render","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b9b8b766.chunk.js","sourcesContent":["import React from 'react';\nconst Header = () => {\n    return (\n        <header className=\"header d-flex align-center\">\n            <h4 className=\"header-item company-name\">Food-aholic</h4>\n        </header>\n    );\n}\n\nexport default Header;","import React from 'react';\nconst Footer = () => {\n    return (\n        <footer className=\"footer\">\n            <div className=\"footer-container d-flex justify-center align-center\">\n                <h5 className=\"footer-item company-name\">Food-aholic</h5>\n                <p className=\"footer-item copyright\">Copyright 2021 © Food-aholic</p>\n            </div>\n        </footer>\n    );\n}\n\nexport default Footer;","export default __webpack_public_path__ + \"static/media/currentLocation.4853a16e.svg\";","export default __webpack_public_path__ + \"static/media/restaurantMarker.ae79e8e9.svg\";","import React, { useEffect, useRef, Fragment } from 'react';\nimport classnames from 'classnames';\nimport deepEqual from 'deep-equal';\nimport currentLocation from '../assets/currentLocation.svg';\nimport restaurantIcon from '../assets/restaurantMarker.svg';\nconst { google } = window;\n\nfunction Map({ userLocation, restaurantLocation, getCurrentLocation, setLocation, restaurants, getDirection }) {\n\n    const mapRef = useRef(null);\n    const searchBox = useRef(null);\n    let userLatlng = new google.maps.LatLng(userLocation.latitude, userLocation.longitude);\n    const directionService = new window.google.maps.DirectionsRenderer();\n\n    useEffect(() => {\n        initGoogleMap();\n    });\n\n    const initGoogleMap = () => {\n\n        let map = new google.maps.Map(mapRef.current, {\n            zoom: 15,\n            center: userLatlng\n        });\n        new google.maps.Marker({\n            position: userLatlng,\n            title: \"User Location\",\n            map: map\n        });\n\n        if (restaurants) {\n            let icon = {\n                url: restaurantIcon,\n                size: new google.maps.Size(100, 100),\n                origin: new google.maps.Point(0, 0),\n                anchor: new google.maps.Point(17, 34),\n                scaledSize: new google.maps.Size(35, 45)\n            };\n\n            restaurants.forEach(({ name, location }) => {\n                new google.maps.Marker({\n                    position: new google.maps.LatLng(location.lat, location.lng),\n                    title: name,\n                    animation: google.maps.Animation.DROP,\n                    icon,\n                    map: map\n                });\n            });\n        }\n        if (getDirection) {\n            const selectedAddress = new window.google.maps.LatLng(restaurantLocation.lat, restaurantLocation.lng);\n            directionService.setMap(map)\n            drawRoute();\n            let bounds = new window.google.maps.LatLngBounds();\n            bounds.extend(selectedAddress);\n            bounds.extend(userLatlng);\n            map.fitBounds(bounds);\n        } else {\n            initSearchBox();\n        }\n\n    }\n    const drawRoute = () => {\n        new window.google.maps.DirectionsService().route({\n            origin: userLatlng,\n            destination: new window.google.maps.LatLng(restaurantLocation.lat, restaurantLocation.lng),\n            travelMode: 'DRIVING'\n        }, (response, status) => {\n            if (status === 'OK') {\n                directionService.setDirections(response);\n            } else {\n                console.log(\"couldn't find route\");\n            }\n        });\n    }\n    const initSearchBox = () => {\n        const input = searchBox.current;\n        const autocomplete = new google.maps.places.Autocomplete(input);\n        autocomplete.setFields(['place_id', 'geometry', 'formatted_address']);\n        autocomplete.addListener('place_changed', () => {\n            var place = autocomplete.getPlace();\n            if (!place.geometry) {\n                return;\n            }\n            const location = {\n                latitude: place.geometry.location.lat(),\n                longitude: place.geometry.location.lng()\n            };\n            setLocation(location);\n            input.value = place.formatted_address;\n        });\n    }\n\n    return (\n        <Fragment>\n            {\n                !getDirection &&\n                <div className=\"location-searchbox\">\n                    <input className=\"searchbox\" ref={searchBox} type=\"text\" placeholder=\"Search location\" />\n                    <div\n                        className=\"current-location\"\n                        onClick={() => getCurrentLocation()}>\n                        <span>  Use current location</span>\n                        <img src={currentLocation} className=\"current-location-icon\" alt=\"get-location\" />\n                    </div>\n                </div>\n            }\n\n            <div className={classnames('map-container', { 'direction-map': getDirection })} ref={mapRef} />\n        </Fragment>\n\n    );\n}\nfunction areEqual(prevProps, nextProps) {\n    return deepEqual(prevProps.restaurants, nextProps.restaurants);\n}\n\n\nexport default React.memo(Map, areEqual);","import React from 'react';\nimport Map from './map';\nexport default function Modal({ toogleModal, restaurant, restaurantLocation, userLocation }) {\n    const { name, vicinity } = restaurant;\n    return (\n        <div className=\"modal\" tabIndex=\"-1\" role=\"dialog\" style={{ display: 'block', cursor: 'auto' }} >\n            <div className=\"modal-dialog modal-lg\" role=\"document\">\n                <div className=\"modal-content\">\n                    <div className=\"modal-header\">\n                        <h5 className=\"modal-title\">{name}</h5>\n                        <button type=\"button\" className=\"close\" aria-label=\"Close\" onClick={() => toogleModal()}>\n                            <span aria-hidden=\"true\">&times;</span>\n                        </button>\n                    </div>\n                    <div className=\"modal-body\">\n                        <Map\n                            userLocation={userLocation}\n                            restaurantLocation={restaurantLocation}\n                            getDirection\n                        />\n                        <p className=\"modal-location\"> Location : {vicinity}</p>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\n\n","export default __webpack_public_path__ + \"static/media/filledStar.db21ac16.svg\";","export default __webpack_public_path__ + \"static/media/emptyStar.c737b0ad.svg\";","import React from 'react';\nimport FilledStar from '../assets/filledStar.svg';\nimport EmptyStar from '../assets/emptyStar.svg';\nexport default function Ratings({ type, rating }) {\n    let ratingsWidth;\n    if (rating) {\n        ratingsWidth = Math.round((rating / 5) * 100);\n    }\n    return (\n        <div className={`rating-${type}`} style={rating && { width: `${ratingsWidth}%` }}>\n            {\n                new Array(5).fill(0).map((_, index) => <img src={type === 'empty' ? EmptyStar : FilledStar} alt={type} key={index} />)\n            }\n        </div>\n    );\n}","import React, { useState } from 'react';\nimport classnames from 'classnames';\nimport Modal from '../modal';\nimport Ratings from '../ratings';\n\nfunction Card({ userLocation, restaurant, selectedRestaurant, changeRestaurant }) {\n\n    const [direction, showDirection] = useState(false);\n    const { id, name, rating, user_ratings_total, vicinity, photos, location, price_level } = restaurant;\n\n    /**\n     * Show/hide direaction Map\n     * @param {*} restaurantId\n     */\n    const displayDirection = (restaurantId) => {\n        if ((restaurantId !== null && restaurantId !== selectedRestaurant) || typeof restaurantId === 'undefined') {\n            showDirection(!direction);\n            changeRestaurant(selectedRestaurant ? null : restaurantId);\n        }\n    }\n    const classes = classnames('restaurant',\n        'col-xl-4 col-lg-6 col-sm-12', {\n        'modal-parent': direction && selectedRestaurant === id\n    });\n\n    return (\n        <div className={classes} >\n            {(direction && selectedRestaurant === id) && <Modal restaurant={restaurant} restaurantLocation={location} userLocation={userLocation} toogleModal={displayDirection} />}\n\n            <div className=\"title\">\n                <span className=\"name\">{name}</span>\n                <span className=\"direction\" onClick={() => displayDirection(id)}> Get Direction</span>\n            </div>\n            {\n                rating &&\n                <div className=\"ratings\">\n                    <span className=\"number\">{rating}</span>\n                    <div className=\"rating-wrap\">\n                        <Ratings type=\"empty\" />\n                        <Ratings type=\"fill\" rating={rating} />\n                    </div>\n                    <span className=\"total-ratings\">({user_ratings_total})</span>\n                    {\n                        price_level &&\n                        <span className=\"price\">\n                            {new Array(price_level).fill(0).map(() => '$')}\n                        </span>\n                    }\n                </div>\n            }\n            {photos && <img src={photos} width={350} height={200} alt=\"img\" />}\n            <div className=\"address\">{vicinity}</div>\n        </div>\n    );\n}\n\nexport default Card;","import React, { useState } from 'react';\nimport Card from './card';\nimport deepEqual from 'deep-equal';\n/**\n * \n * @returns Element\n */\nfunction NoRestaurants() {\n    return (\n        <div className=\"no-restaurants d-flex align-center justify-center\">\n            <h2 className=\"message\">No Restaurants Found</h2>\n        </div>\n    );\n}\n\n\n\nfunction Restaurants({ restaurants, userLocation }) {\n\n    const [selectedRestaurant, changeRestaurant] = useState(null);\n\n    return (\n        <div className=\"container-fluid all-restaurants\">\n            <div id=\"map\" />\n            {\n                restaurants.length === 0 ?\n                    <NoRestaurants />\n                    :\n                    restaurants.map((restaurant) => (\n                        <Card\n                            key={restaurant.id}\n                            restaurant={restaurant}\n                            userLocation={userLocation}\n                            selectedRestaurant={selectedRestaurant}\n                            changeRestaurant={changeRestaurant}\n                        />\n                    ))\n            }\n        </div>\n    );\n}\n\nfunction areEqual(prevProps, nextProps) {\n    return deepEqual(prevProps.restaurants, nextProps.restaurants);\n}\n\n\nexport default React.memo(Restaurants, areEqual);","import React, { useState, useEffect, useCallback } from 'react';\n/**\n * local dependencies\n */\nimport {\n    Map,\n    Restaurants\n} from '../components';\n\nfunction Home() {\n    const [restaurants, setRestaurants] = useState([]);\n    const [pagination, setPagination] = useState(null);\n    const [searchParams, setSearchParams] = useState({ restaurant: '', radius: 3000 })\n    const [userLocation, setLocation] = useState({ latitude: 23.7815222, longitude: 90.4004866 });\n\n    /**\n     * Set location to local Location\n     */\n    const getCurrentLocation = useCallback(() => {\n        if (navigator && navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition((position) => {\n                setLocation(position.coords);\n            });\n        }\n    }, [])\n\n    /**\n     * Update location after mount\n     */\n    useEffect(() => {\n        getCurrentLocation();\n    }, [getCurrentLocation])\n\n    useEffect(() => {\n        const service = new window.google.maps.places.PlacesService(document.getElementById('map'));\n        const request = {\n            location: {\n                lat: userLocation.latitude,\n                lng: userLocation.longitude,\n            },\n            radius: searchParams.radius,\n            type: ['restaurant'],\n            name: searchParams.restaurant\n        };\n        service.nearbySearch(request, (results, status, PlaceSearchPagination) => {\n            let availableRestaurants = []\n            if (status === window.google.maps.places.PlacesServiceStatus.OK) {\n                availableRestaurants = results.map(({ place_id, icon, name, photos, price_level, rating, user_ratings_total, vicinity, geometry, opening_hours, reference }) => (\n                    {\n                        id: place_id,\n                        icon,\n                        name,\n                        photos: photos ? photos[0].getUrl() : null,\n                        price_level,\n                        rating,\n                        user_ratings_total,\n                        vicinity,\n                        reference,\n                        location: {\n                            lat: geometry.location.lat(),\n                            lng: geometry.location.lng(),\n                        },\n                        isOpen: opening_hours ? opening_hours.isOpen ? opening_hours.isOpen() : opening_hours.open_now : undefined\n                    }\n                ));\n            }\n            setRestaurants(availableRestaurants)\n            setPagination(PlaceSearchPagination.hasNextPage ? PlaceSearchPagination : null);\n        });\n\n    }, [userLocation, searchParams.radius, searchParams.restaurant]);\n\n    /**\n     * Update Search params\n     * @param {*} event \n     */\n    const updateSearch = (event) => {\n        const { name, value } = event.target;\n        setSearchParams((prevState) => ({\n            ...prevState,\n            [name]: value\n        }))\n    }\n\n\n    return (\n        <div className=\"home\">\n            <Map\n                userLocation={userLocation}\n                restaurants={restaurants}\n                getCurrentLocation={getCurrentLocation}\n                setLocation={setLocation}\n                radius={searchParams.radius}\n            />\n            <div className=\"search-restaurants\">\n                <input\n                    type=\"text\"\n                    id=\"restaurant\"\n                    name=\"restaurant\"\n                    value={searchParams.restaurant}\n                    placeholder=\"Search Restaurants...\"\n                    className=\"restaurants-search-input\"\n                    onChange={updateSearch}\n                />\n                <div className=\"radius-field\">\n                    <label htmlFor=\"radius\" className=\"label\">Distance</label>\n                    <input\n                        min={10}\n                        step={100}\n                        max={20000}\n                        id=\"radius\"\n                        name=\"radius\"\n                        type=\"range\"\n                        value={searchParams.radius}\n                        className=\"radius-change\"\n                        onChange={updateSearch}\n                    />\n                    <span className=\"distance\">{(searchParams.radius / 1000).toFixed(2)} km</span>\n                </div>\n            </div>\n            <div className=\"header\" >\n                {restaurants && <span className=\"restaurants\">Available Restaurants</span>}\n                {(pagination && pagination.hasNextPage) && < span className=\"next-button\" onClick={() => pagination.nextPage()}>More Restaurants</span>}\n            </div>\n            {\n                restaurants === null ?\n                    <div> loading..  </div>\n                    :\n                    <Restaurants restaurants={restaurants} userLocation={userLocation} />\n            }\n        </div >\n    );\n}\n\nexport default Home;","import './styles/main.scss';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport React, { Fragment } from 'react';\nimport { Header, Footer } from './components';\nimport Pages from './pages';\n\nfunction App() {\n  return (\n    <Fragment>\n      <Header />\n      <Pages />\n      <Footer />\n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.0/8 are considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Let's check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl, config);\n  \n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\n            );\n          });\n        } else {\n          // Is not localhost. Just register service worker\n          registerValidSW(swUrl, config);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                  'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                );\n  \n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n  \n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n      headers: { 'Service-Worker': 'script' }\n    })\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n          (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister();\n      });\n    }\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n\n"],"sourceRoot":""}