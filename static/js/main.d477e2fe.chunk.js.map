{"version":3,"sources":["assets/filledStar.svg","assets/emptyStar.svg","assets/currentLocation.svg","assets/restaurantMarker.svg","components/ratings.js","components/restaurant.js","pages/restaurants.js","pages/map.js","pages/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Ratings","ratingsWidth","type","rating","Math","round","className","style","width","Array","fill","map","item","index","src","EmptyStar","FilledStar","alt","key","Restaurant","name","icon","user_ratings_total","vicinity","photos","opening_hours","console","log","isOpen","height","Restaurants","restaurants","id","reference","google","window","Map","location","getCurrentLocation","setLocation","mapRef","useRef","searchBox","useEffect","initGoogleMap","myLatlng","maps","LatLng","latitude","longitude","current","zoom","center","Marker","position","title","url","restaurantIcon","size","Size","origin","Point","anchor","scaledSize","forEach","lat","lng","animation","Animation","DROP","initSearchBox","input","autocomplete","places","Autocomplete","setFields","addListener","place","getPlace","geometry","value","formatted_address","ref","placeholder","onClick","currentLocation","useState","setRestaurants","restaurantName","changeRestaurantName","radius","setRadius","service","PlacesService","document","getElementById","request","nearbySearch","results","status","PlaceSearchPagination","PlacesServiceStatus","OK","price_level","getUrl","findRestaurants","navigator","geolocation","getCurrentPosition","coords","onChange","event","target","min","step","max","e","toFixed","App","Boolean","hostname","match","ReactDOM","render","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d477e2fe.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/filledStar.298726f0.svg\";","module.exports = __webpack_public_path__ + \"static/media/emptyStar.83ee06f8.svg\";","module.exports = __webpack_public_path__ + \"static/media/currentLocation.ffe692f4.svg\";","module.exports = __webpack_public_path__ + \"static/media/restaurantMarker.5196798a.svg\";","import React from 'react';\r\nimport FilledStar from '../assets/filledStar.svg';\r\nimport EmptyStar from '../assets/emptyStar.svg';\r\nexport default function Ratings({ type, rating }) {\r\n    let ratingsWidth;\r\n    if (rating) {\r\n        ratingsWidth = Math.round((rating / 5) * 100);\r\n    }\r\n    return (\r\n        <div className={`rating-${type}`} style={rating && { width: `${ratingsWidth}%` }}>\r\n            {\r\n                new Array(5).fill(0).map((item, index) => <img src={type === 'empty' ? EmptyStar : FilledStar} alt={type} key={index} />)\r\n            }\r\n        </div>\r\n    );\r\n}","import React from 'react'\r\nimport Ratings from './ratings.js'\r\nexport default function Restaurant({ item }) {\r\n\r\n    const {\r\n        name,\r\n        icon,\r\n        rating,\r\n        user_ratings_total,\r\n        vicinity,\r\n        photos,\r\n        opening_hours\r\n    } = item\r\n\r\n\r\n    // console.log('item : ',item)\r\n\r\n    if (opening_hours) {\r\n        console.log('is open : ', opening_hours.isOpen())\r\n    }\r\n    return (\r\n        <div className=\"restaurant\">\r\n            <div className=\"title\">\r\n                <img className=\"icon\" src={icon} alt=\"icon\" />\r\n                <span className=\"name\"> {name}</span>\r\n            </div>\r\n            {\r\n\r\n                rating &&\r\n                <div className=\"ratings\">\r\n                    <span className=\"number\">{rating}</span>\r\n                    <div className=\"rating-wrap\">\r\n                        <Ratings type=\"empty\" />\r\n                        <Ratings type=\"fill\" rating={rating} />\r\n                    </div>\r\n                    <span className=\"total-ratings\">({user_ratings_total})</span>\r\n                </div>\r\n            }\r\n\r\n            {\r\n                photos && <img src={photos} width={350} height={200} alt=\"img\" />\r\n            }\r\n            <div className=\"address\">{vicinity}</div>\r\n        </div>\r\n    )\r\n\r\n}","import React from 'react';\r\n\r\nimport {\r\n    Restaurant,\r\n} from '../components'\r\nimport '../styles/restaurants.scss';\r\n\r\nexport default function Restaurants({ restaurants }) {\r\n\r\n    return (\r\n        <div>\r\n            <div id=\"map\" />\r\n            <div className=\"all-restaurants\">\r\n                {\r\n                    restaurants == null ?\r\n                        <div>\r\n                            loading..\r\n                        </div>\r\n                        :\r\n                        restaurants.map(item => <Restaurant item={item} key={item.reference} />)\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\n\r\n","import React, { useEffect, useRef, Fragment } from 'react';\r\nimport '../styles/map.scss';\r\nimport currentLocation from '../assets/currentLocation.svg';\r\nimport restaurantIcon from '../assets/restaurantMarker.svg';\r\nconst { google } = window;\r\nexport default function Map({ location, getCurrentLocation, setLocation, restaurants }) {\r\n    const mapRef = useRef(null);\r\n    const searchBox = useRef(null);\r\n    useEffect(() => {\r\n        initGoogleMap();\r\n    });\r\n\r\n    const initGoogleMap = () => {\r\n        let myLatlng = new google.maps.LatLng(location.latitude, location.longitude)\r\n        let map = new google.maps.Map(mapRef.current, {\r\n            zoom: 15,\r\n            center: new google.maps.LatLng(location.latitude, location.longitude)\r\n        });\r\n        new google.maps.Marker({\r\n            position: myLatlng,\r\n            title: \"Current Location\",\r\n            map: map\r\n            // draggable: true,\r\n        });\r\n        // marker.addListener('dragend', () => {\r\n        //     console.log(marker.getPosition().lat())\r\n        //     console.log(marker.getPosition().lng())\r\n        // })\r\n        if (restaurants) {\r\n            let icon = {\r\n                url: restaurantIcon,\r\n                size: new google.maps.Size(100, 100),\r\n                origin: new google.maps.Point(0, 0),\r\n                anchor: new google.maps.Point(17, 34),\r\n                scaledSize: new google.maps.Size(35, 45)\r\n            };\r\n\r\n            restaurants.forEach(({ name, location }) => {\r\n                new google.maps.Marker({\r\n                    position: new google.maps.LatLng(location.lat, location.lng),\r\n                    title: name,\r\n                    animation: google.maps.Animation.DROP,\r\n                    icon,\r\n                    map: map\r\n                });\r\n            });\r\n        }\r\n        initSearchBox();\r\n    }\r\n\r\n    const initSearchBox = () => {\r\n        const input = searchBox.current;\r\n        const autocomplete = new google.maps.places.Autocomplete(input);\r\n        autocomplete.setFields(['place_id', 'geometry', 'formatted_address']);\r\n        autocomplete.addListener('place_changed', () => {\r\n            var place = autocomplete.getPlace();\r\n            if (!place.geometry) {\r\n                return;\r\n            }\r\n            const location = {\r\n                latitude: place.geometry.location.lat(),\r\n                longitude: place.geometry.location.lng()\r\n            };\r\n            setLocation(location);\r\n            input.value = place.formatted_address;\r\n        });\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <div className=\"location-searchbox\">\r\n                <input className=\"searchbox\" ref={searchBox} type=\"text\" placeholder=\"Search location\" />\r\n                <div\r\n                    className=\"current-location\"\r\n                    onClick={() => getCurrentLocation()}>\r\n                    <span>  Use current location</span>\r\n                    <img src={currentLocation} className=\"current-location-icon\" alt=\"get-location\" />\r\n                </div>\r\n            </div>\r\n            <div className=\"map-container\" ref={mapRef} />\r\n        </Fragment>\r\n\r\n    );\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport Restaurants from './restaurants';\r\nimport Map from './map';\r\nimport '../styles/homepage.scss';\r\nexport default function () {\r\n    const [restaurants, setRestaurants] = useState(null);\r\n    const [restaurantName, changeRestaurantName] = useState('');\r\n    const [location, setLocation] = useState({ latitude: 23.7815222, longitude: 90.4004866 });\r\n    const [radius, setRadius] = useState(3000);\r\n\r\n    useEffect(() => {\r\n        const findRestaurants = () => {\r\n            const service = new window.google.maps.places.PlacesService(document.getElementById('map'));\r\n            var request = {\r\n                location: {\r\n                    lat: location.latitude,\r\n                    lng: location.longitude,\r\n                },\r\n                radius: radius,\r\n                type: ['restaurant'],\r\n                // rankby: 'distance',\r\n                name: restaurantName\r\n            };\r\n            service.nearbySearch(request, (results, status, PlaceSearchPagination) => {\r\n                console.log('results : ', results)\r\n                console.log('PlaceSearchPagination : ', PlaceSearchPagination)\r\n                if (status === window.google.maps.places.PlacesServiceStatus.OK) {\r\n                    console.log('results : ', results)\r\n                    setRestaurants(results.map(({ icon, name, photos, price_level, rating, user_ratings_total, vicinity, geometry, opening_hours, reference }) => {\r\n                        return (\r\n                            {\r\n                                icon,\r\n                                name,\r\n                                photos: photos ? photos[0].getUrl() : null,\r\n                                price_level,\r\n                                rating,\r\n                                user_ratings_total,\r\n                                vicinity,\r\n                                reference,\r\n                                location: {\r\n                                    lat: geometry.location.lat(),\r\n                                    lng: geometry.location.lng(),\r\n                                },\r\n                                // ..(opening_hours && { isOpen: opening_hours.isOpen ? opening_hours.isOpen() : opening_hours.open_now })\r\n                            }\r\n                        );\r\n                    }));\r\n                } else if (status === 'ZERO_RESULTS') {\r\n                    setRestaurants([]);\r\n                }\r\n            });\r\n\r\n        }\r\n        findRestaurants();\r\n    }, [location, radius, restaurantName]);\r\n\r\n\r\n\r\n    const getCurrentLocation = () => {\r\n        if (navigator && navigator.geolocation) {\r\n            navigator.geolocation.getCurrentPosition(position => {\r\n                setLocation(position.coords);\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"home\">\r\n            <Map\r\n                location={location}\r\n                restaurants={restaurants}\r\n                getCurrentLocation={getCurrentLocation}\r\n                setLocation={setLocation}\r\n                radius={radius}\r\n            />\r\n            <div className=\"search-restaurants\">\r\n                <input type=\"text\" id=\"restaurant\" className=\"restaurants-search-input\" value={restaurantName} placeholder=\"Search Restaurants...\" onChange={event => changeRestaurantName(event.target.value)} />\r\n                <div className=\"radius-field\">\r\n                    <span className=\"label\">Distance</span>\r\n                    <input min={10} step={100} max={20000} id=\"radius\" type=\"range\" value={radius} onChange={e => setRadius(e.target.value)} />\r\n                    <span className=\"distance\">{(radius / 1000).toFixed(2)} km</span>\r\n                </div>\r\n            </div>\r\n            <h3 className=\"header\">  Available Restaurants  </h3>\r\n            <Restaurants\r\n                restaurants={restaurants}\r\n            />\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport Pages from './pages';\r\nfunction App() {\r\n  return (\r\n    <Pages />\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}