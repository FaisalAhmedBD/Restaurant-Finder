{"version":3,"sources":["assets/filledStar.svg","assets/emptyStar.svg","assets/currentLocation.svg","assets/restaurantMarker.svg","components/ratings.js","components/restaurants.js","components/map.js","pages/index.js","App.js","index.js"],"names":["module","exports","Ratings","ratingsWidth","type","rating","Math","round","className","style","width","Array","fill","map","_","index","src","EmptyStar","FilledStar","alt","key","Restaurants","restaurants","id","name","icon","user_ratings_total","vicinity","photos","price_level","opening_hours","reference","item","height","google","window","Map","location","getCurrentLocation","setLocation","mapRef","useRef","searchBox","useEffect","initGoogleMap","myLatlng","maps","LatLng","latitude","longitude","current","zoom","center","Marker","position","title","url","restaurantIcon","size","Size","origin","Point","anchor","scaledSize","forEach","lat","lng","animation","Animation","DROP","initSearchBox","input","autocomplete","places","Autocomplete","setFields","addListener","place","getPlace","geometry","value","formatted_address","ref","placeholder","onClick","currentLocation","useState","setRestaurants","restaurantName","changeRestaurantName","radius","setRadius","service","PlacesService","document","getElementById","request","nearbySearch","results","status","PlaceSearchPagination","PlacesServiceStatus","OK","getUrl","findRestaurants","navigator","geolocation","getCurrentPosition","coords","onChange","event","target","min","step","max","e","toFixed","App","ReactDOM","render"],"mappings":"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","file":"static/js/main.db316f9b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/filledStar.298726f0.svg\";","module.exports = __webpack_public_path__ + \"static/media/emptyStar.83ee06f8.svg\";","module.exports = __webpack_public_path__ + \"static/media/currentLocation.ffe692f4.svg\";","module.exports = __webpack_public_path__ + \"static/media/restaurantMarker.06e59673.svg\";","import React from 'react';\r\nimport FilledStar from '../assets/filledStar.svg';\r\nimport EmptyStar from '../assets/emptyStar.svg';\r\nexport default function Ratings({ type, rating }) {\r\n    let ratingsWidth;\r\n    if (rating) {\r\n        ratingsWidth = Math.round((rating / 5) * 100);\r\n    }\r\n    return (\r\n        <div className={`rating-${type}`} style={rating && { width: `${ratingsWidth}%` }}>\r\n            {\r\n                new Array(5).fill(0).map((_, index) => <img src={type === 'empty' ? EmptyStar : FilledStar} alt={type} key={index} />)\r\n            }\r\n        </div>\r\n    );\r\n}","import React from 'react'\r\nimport Ratings from './ratings.js'\r\nimport '../styles/restaurants.scss';\r\nexport default function Restaurants({ restaurants }) {\r\n    return (\r\n\r\n        <div className=\"all-restaurants\">\r\n            <div id=\"map\" />\r\n            {\r\n                restaurants == null ?\r\n                    <div>\r\n                        loading..\r\n                </div>\r\n                    :\r\n                    restaurants.map(({ name, icon, rating, user_ratings_total, vicinity, photos, opening_hours, price_level, reference }) => {\r\n                        return (\r\n                            <div className=\"restaurant\" key={reference}>\r\n                                <div className=\"title\">\r\n                                    <span className=\"name\"> {name}</span>\r\n                                </div>\r\n                                {\r\n\r\n                                    rating &&\r\n                                    <div className=\"ratings\">\r\n                                        <span className=\"number\">{rating}</span>\r\n                                        <div className=\"rating-wrap\">\r\n                                            <Ratings type=\"empty\" />\r\n                                            <Ratings type=\"fill\" rating={rating} />\r\n                                        </div>\r\n                                        <span className=\"total-ratings\">({user_ratings_total})</span>\r\n                                        {\r\n                                            price_level &&\r\n                                            <span className=\"price\">\r\n                                                {new Array(price_level).fill(0).map(item => '$')}\r\n                                            </span>\r\n                                        }\r\n\r\n                                    </div>\r\n                                }\r\n                                \r\n                                {\r\n                                    photos && <img src={photos} width={350} height={200} alt=\"img\" />\r\n                                }\r\n                                <div className=\"address\">{vicinity}</div>\r\n                            </div>\r\n                        )\r\n                    })\r\n            }\r\n        </div>\r\n\r\n    )\r\n\r\n}","import React, { useEffect, useRef, Fragment } from 'react';\r\nimport '../styles/map.scss';\r\nimport currentLocation from '../assets/currentLocation.svg';\r\nimport restaurantIcon from '../assets/restaurantMarker.svg';\r\nconst { google } = window;\r\nexport default function Map({ location, getCurrentLocation, setLocation, restaurants }) {\r\n    const mapRef = useRef(null);\r\n    const searchBox = useRef(null);\r\n    useEffect(() => {\r\n        initGoogleMap();\r\n    });\r\n\r\n    const initGoogleMap = () => {\r\n        let myLatlng = new google.maps.LatLng(location.latitude, location.longitude)\r\n        let map = new google.maps.Map(mapRef.current, {\r\n            zoom: 15,\r\n            center: new google.maps.LatLng(location.latitude, location.longitude)\r\n        });\r\n        new google.maps.Marker({\r\n            position: myLatlng,\r\n            title: \"Current Location\",\r\n            map: map\r\n            // draggable: true,\r\n        });\r\n        // marker.addListener('dragend', () => {\r\n        //     console.log(marker.getPosition().lat())\r\n        //     console.log(marker.getPosition().lng())\r\n        // })\r\n        if (restaurants) {\r\n            let icon = {\r\n                url: restaurantIcon,\r\n                size: new google.maps.Size(100, 100),\r\n                origin: new google.maps.Point(0, 0),\r\n                anchor: new google.maps.Point(17, 34),\r\n                scaledSize: new google.maps.Size(35, 45)\r\n            };\r\n\r\n            restaurants.forEach(({ name, location }) => {\r\n                new google.maps.Marker({\r\n                    position: new google.maps.LatLng(location.lat, location.lng),\r\n                    title: name,\r\n                    animation: google.maps.Animation.DROP,\r\n                    icon,\r\n                    map: map\r\n                });\r\n            });\r\n        }\r\n        initSearchBox();\r\n    }\r\n\r\n    const initSearchBox = () => {\r\n        const input = searchBox.current;\r\n        const autocomplete = new google.maps.places.Autocomplete(input);\r\n        autocomplete.setFields(['place_id', 'geometry', 'formatted_address']);\r\n        autocomplete.addListener('place_changed', () => {\r\n            var place = autocomplete.getPlace();\r\n            if (!place.geometry) {\r\n                return;\r\n            }\r\n            const location = {\r\n                latitude: place.geometry.location.lat(),\r\n                longitude: place.geometry.location.lng()\r\n            };\r\n            setLocation(location);\r\n            input.value = place.formatted_address;\r\n        });\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <div className=\"location-searchbox\">\r\n                <input className=\"searchbox\" ref={searchBox} type=\"text\" placeholder=\"Search location\" />\r\n                <div\r\n                    className=\"current-location\"\r\n                    onClick={() => getCurrentLocation()}>\r\n                    <span>  Use current location</span>\r\n                    <img src={currentLocation} className=\"current-location-icon\" alt=\"get-location\" />\r\n                </div>\r\n            </div>\r\n            <div className=\"map-container\" ref={mapRef} />\r\n        </Fragment>\r\n\r\n    );\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\n// import Map from './map';\r\nimport {\r\n    Map,\r\n    Restaurants\r\n} from '../components';\r\nimport '../styles/homepage.scss';\r\nexport default function () {\r\n    const [restaurants, setRestaurants] = useState(null);\r\n    const [restaurantName, changeRestaurantName] = useState('');\r\n    const [location, setLocation] = useState({ latitude: 23.7815222, longitude: 90.4004866 });\r\n    const [radius, setRadius] = useState(3000);\r\n\r\n    useEffect(() => {\r\n        const findRestaurants = () => {\r\n            const service = new window.google.maps.places.PlacesService(document.getElementById('map'));\r\n            var request = {\r\n                location: {\r\n                    lat: location.latitude,\r\n                    lng: location.longitude,\r\n                },\r\n                radius: radius,\r\n                type: ['restaurant'],\r\n                // rankby: 'distance',\r\n                name: restaurantName\r\n            };\r\n            service.nearbySearch(request, (results, status, PlaceSearchPagination) => {\r\n                // console.log('results : ', results)\r\n                // console.log('PlaceSearchPagination : ', PlaceSearchPagination)\r\n                if (status === window.google.maps.places.PlacesServiceStatus.OK) {\r\n                    // console.log('results : ', results)\r\n                    setRestaurants(results.map(({ icon, name, photos, price_level, rating, user_ratings_total, vicinity, geometry, opening_hours, reference }) => {\r\n                        return (\r\n                            {\r\n                                icon,\r\n                                name,\r\n                                photos: photos ? photos[0].getUrl() : null,\r\n                                price_level,\r\n                                rating,\r\n                                user_ratings_total,\r\n                                vicinity,\r\n                                reference,\r\n                                location: {\r\n                                    lat: geometry.location.lat(),\r\n                                    lng: geometry.location.lng(),\r\n                                },\r\n                                // ..(opening_hours && { isOpen: opening_hours.isOpen ? opening_hours.isOpen() : opening_hours.open_now })\r\n                            }\r\n                        );\r\n                    }));\r\n                } else if (status === 'ZERO_RESULTS') {\r\n                    setRestaurants([]);\r\n                }\r\n            });\r\n\r\n        }\r\n        findRestaurants();\r\n    }, [location, radius, restaurantName]);\r\n\r\n\r\n\r\n    const getCurrentLocation = () => {\r\n        if (navigator && navigator.geolocation) {\r\n            navigator.geolocation.getCurrentPosition(position => {\r\n                setLocation(position.coords);\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"home\">\r\n            <Map\r\n                location={location}\r\n                restaurants={restaurants}\r\n                getCurrentLocation={getCurrentLocation}\r\n                setLocation={setLocation}\r\n                radius={radius}\r\n            />\r\n            <div className=\"search-restaurants\">\r\n                <input type=\"text\" id=\"restaurant\" className=\"restaurants-search-input\" value={restaurantName} placeholder=\"Search Restaurants...\" onChange={event => changeRestaurantName(event.target.value)} />\r\n                <div className=\"radius-field\">\r\n                    <span className=\"label\">Distance</span>\r\n                    <input min={10} step={100} max={20000} id=\"radius\" type=\"range\" value={radius} onChange={e => setRadius(e.target.value)} />\r\n                    <span className=\"distance\">{(radius / 1000).toFixed(2)} km</span>\r\n                </div>\r\n            </div>\r\n            <h3 className=\"header\">  Available Restaurants  </h3>\r\n            <Restaurants restaurants={restaurants} />\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport Pages from './pages';\r\nfunction App() {\r\n  return (\r\n    <Pages />\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n\r\n"],"sourceRoot":""}