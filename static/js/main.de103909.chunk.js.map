{"version":3,"sources":["assets/currentLocation.svg","assets/restaurantMarker.svg","assets/filledStar.svg","assets/emptyStar.svg","components/map.js","components/modal.js","components/ratings.js","components/restaurants.js","pages/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","google","window","Map","userLocation","restaurantLocation","getCurrentLocation","setLocation","restaurants","getDirection","mapRef","useRef","searchBox","userLatlng","maps","LatLng","latitude","longitude","directionService","DirectionsRenderer","useEffect","initGoogleMap","map","current","zoom","center","Marker","position","title","icon","url","restaurantIcon","size","Size","origin","Point","anchor","scaledSize","forEach","name","location","lat","lng","animation","Animation","DROP","selectedAddress","setMap","drawRoute","bounds","LatLngBounds","extend","fitBounds","initSearchBox","DirectionsService","route","destination","travelMode","response","status","setDirections","console","log","input","autocomplete","places","Autocomplete","setFields","addListener","place","getPlace","geometry","value","formatted_address","className","ref","type","placeholder","onClick","src","currentLocation","alt","Modal","toogleModal","restaurant","vicinity","tabIndex","role","style","display","cursor","aria-label","aria-hidden","classname","Ratings","ratingsWidth","rating","Math","round","width","Array","fill","_","index","EmptyStar","FilledStar","key","Restaurants","useState","showModal","toggleModal","activeRestaurant","changeRestaurant","handleModal","id","user_ratings_total","photos","price_level","reference","displayDetails","item","height","setRestaurants","pagination","setPagination","restaurantName","changeRestaurantName","radius","setRadius","service","PlacesService","document","getElementById","request","nearbySearch","results","PlaceSearchPagination","hasNextPage","PlacesServiceStatus","OK","opening_hours","getUrl","isOpen","open_now","undefined","findRestaurants","navigator","geolocation","getCurrentPosition","coords","onChange","event","target","min","step","max","e","toFixed","nextPage","App","Boolean","hostname","match","ReactDOM","render","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.de103909.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/currentLocation.ffe692f4.svg\";","module.exports = __webpack_public_path__ + \"static/media/restaurantMarker.06e59673.svg\";","module.exports = __webpack_public_path__ + \"static/media/filledStar.298726f0.svg\";","module.exports = __webpack_public_path__ + \"static/media/emptyStar.83ee06f8.svg\";","\r\nimport React, { useEffect, useRef, Fragment } from 'react';\r\nimport '../styles/map.scss';\r\nimport currentLocation from '../assets/currentLocation.svg';\r\nimport restaurantIcon from '../assets/restaurantMarker.svg';\r\nconst { google } = window;\r\n\r\nexport default function Map({ userLocation, restaurantLocation, getCurrentLocation, setLocation, restaurants, getDirection }) {\r\n\r\n    const mapRef = useRef(null);\r\n    const searchBox = useRef(null);\r\n    let userLatlng = new google.maps.LatLng(userLocation.latitude, userLocation.longitude);\r\n    const directionService = new window.google.maps.DirectionsRenderer();\r\n\r\n    useEffect(() => {\r\n        initGoogleMap();\r\n    });\r\n\r\n    const initGoogleMap = () => {\r\n\r\n        let map = new google.maps.Map(mapRef.current, {\r\n            zoom: 15,\r\n            center: userLatlng\r\n        });\r\n        new google.maps.Marker({\r\n            position: userLatlng,\r\n            title: \"User Location\",\r\n            map: map\r\n        });\r\n\r\n        if (restaurants) {\r\n            let icon = {\r\n                url: restaurantIcon,\r\n                size: new google.maps.Size(100, 100),\r\n                origin: new google.maps.Point(0, 0),\r\n                anchor: new google.maps.Point(17, 34),\r\n                scaledSize: new google.maps.Size(35, 45)\r\n            };\r\n\r\n            restaurants.forEach(({ name, location }) => {\r\n                new google.maps.Marker({\r\n                    position: new google.maps.LatLng(location.lat, location.lng),\r\n                    title: name,\r\n                    animation: google.maps.Animation.DROP,\r\n                    icon,\r\n                    map: map\r\n                });\r\n            });\r\n        }\r\n        if (getDirection) {\r\n            const selectedAddress = new window.google.maps.LatLng(restaurantLocation.lat, restaurantLocation.lng);\r\n            directionService.setMap(map)\r\n            drawRoute();\r\n            let bounds = new window.google.maps.LatLngBounds();\r\n            bounds.extend(selectedAddress);\r\n            bounds.extend(userLatlng);\r\n            map.fitBounds(bounds);\r\n        } else {\r\n            initSearchBox();\r\n        }\r\n\r\n    }\r\n    const drawRoute = () => {\r\n        new window.google.maps.DirectionsService().route({\r\n            origin: userLatlng,\r\n            destination: new window.google.maps.LatLng(restaurantLocation.lat, restaurantLocation.lng),\r\n            travelMode: 'DRIVING'\r\n        }, (response, status) => {\r\n            if (status === 'OK') {\r\n                directionService.setDirections(response);\r\n            } else {\r\n                console.log(\"couldn't find route\");\r\n            }\r\n        });\r\n    }\r\n    const initSearchBox = () => {\r\n        const input = searchBox.current;\r\n        const autocomplete = new google.maps.places.Autocomplete(input);\r\n        autocomplete.setFields(['place_id', 'geometry', 'formatted_address']);\r\n        autocomplete.addListener('place_changed', () => {\r\n            var place = autocomplete.getPlace();\r\n            if (!place.geometry) {\r\n                return;\r\n            }\r\n            const location = {\r\n                latitude: place.geometry.location.lat(),\r\n                longitude: place.geometry.location.lng()\r\n            };\r\n            setLocation(location);\r\n            input.value = place.formatted_address;\r\n        });\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            {\r\n                !getDirection &&\r\n                <div className=\"location-searchbox\">\r\n                    <input className=\"searchbox\" ref={searchBox} type=\"text\" placeholder=\"Search location\" />\r\n                    <div\r\n                        className=\"current-location\"\r\n                        onClick={() => getCurrentLocation()}>\r\n                        <span>  Use current location</span>\r\n                        <img src={currentLocation} className=\"current-location-icon\" alt=\"get-location\" />\r\n                    </div>\r\n                </div>\r\n            }\r\n\r\n            <div className={`map-container${getDirection ? ' direction-map' : ''}`} ref={mapRef} />\r\n        </Fragment>\r\n\r\n    );\r\n}\r\n","import React from 'react';\r\nimport Map from './map';\r\nexport default function Modal({ toogleModal, restaurant, restaurantLocation, userLocation }) {\r\n    const { name, vicinity } = restaurant;\r\n    return (\r\n        <div className=\"modal\" tabIndex=\"-1\" role=\"dialog\" style={{ display: 'block', cursor: 'auto' }} >\r\n            <div className=\"modal-dialog modal-lg\" role=\"document\">\r\n                <div className=\"modal-content\">\r\n                    <div className=\"modal-header\">\r\n                        <h5 className=\"modal-title\">{name}</h5>\r\n                        <button type=\"button\" className=\"close\" aria-label=\"Close\" onClick={() => toogleModal('hide')}>\r\n                            <span aria-hidden=\"true\">&times;</span>\r\n                        </button>\r\n                    </div>\r\n                    <div className=\"modal-body\">\r\n                        <Map\r\n                            userLocation={userLocation}\r\n                            restaurantLocation={restaurantLocation}\r\n                            getDirection\r\n                        />\r\n                        <p classname=\"modal-location\"> Location : {vicinity}</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport FilledStar from '../assets/filledStar.svg';\r\nimport EmptyStar from '../assets/emptyStar.svg';\r\nexport default function Ratings({ type, rating }) {\r\n    let ratingsWidth;\r\n    if (rating) {\r\n        ratingsWidth = Math.round((rating / 5) * 100);\r\n    }\r\n    return (\r\n        <div className={`rating-${type}`} style={rating && { width: `${ratingsWidth}%` }}>\r\n            {\r\n                new Array(5).fill(0).map((_, index) => <img src={type === 'empty' ? EmptyStar : FilledStar} alt={type} key={index} />)\r\n            }\r\n        </div>\r\n    );\r\n}","import React, { useState } from 'react';\r\nimport Modal from './modal';\r\nimport Ratings from './ratings.js';\r\nimport '../styles/restaurants.scss';\r\nexport default function Restaurants({ restaurants, userLocation }) {\r\n\r\n    const [showModal, toggleModal] = useState(false);\r\n    const [activeRestaurant, changeRestaurant] = useState(null);\r\n\r\n    const handleModal = (id) => {\r\n        if ((id !== null && id !== activeRestaurant) || id === 'hide') {\r\n            toggleModal(!showModal);\r\n            changeRestaurant(activeRestaurant ? null : id);\r\n        }\r\n    }\r\n    return (\r\n        <div className=\"container-fluid all-restaurants\">\r\n            <div id=\"map\" />\r\n            {\r\n                restaurants == null ?\r\n                    <div>\r\n                        loading..\r\n                </div>\r\n                    :\r\n                    restaurants.map(restaurant => {\r\n                        const { id, name, rating, user_ratings_total, vicinity, photos, location, price_level, reference } = restaurant\r\n                        const displayDetails = (showModal && activeRestaurant === id)\r\n                        return (\r\n                            <div className={`restaurant col-xl-4 col-lg-6 col-sm-12 ${displayDetails ? 'modal-parent' : ''}`} key={reference}>\r\n                                {displayDetails && <Modal restaurant={restaurant} restaurantLocation={location} userLocation={userLocation} toogleModal={handleModal} />}\r\n\r\n                                <div className=\"title\">\r\n                                    <span className=\"name\"> {name}</span>\r\n                                    <span className=\"direction\" onClick={() => handleModal(id)}> Get Direction</span>\r\n                                </div>\r\n                                {\r\n                                    rating &&\r\n                                    <div className=\"ratings\">\r\n                                        <span className=\"number\">{rating}</span>\r\n                                        <div className=\"rating-wrap\">\r\n                                            <Ratings type=\"empty\" />\r\n                                            <Ratings type=\"fill\" rating={rating} />\r\n                                        </div>\r\n                                        <span className=\"total-ratings\">({user_ratings_total})</span>\r\n                                        {\r\n                                            price_level &&\r\n                                            <span className=\"price\">\r\n                                                {new Array(price_level).fill(0).map(item => '$')}\r\n                                            </span>\r\n                                        }\r\n\r\n                                    </div>\r\n                                }\r\n\r\n                                {\r\n                                    photos && <img src={photos} width={350} height={200} alt=\"img\" />\r\n                                }\r\n                                <div className=\"address\">{vicinity}</div>\r\n                            </div>\r\n                        )\r\n                    })\r\n            }\r\n        </div>\r\n\r\n    )\r\n\r\n}","import React, { useState, useEffect } from 'react';\r\nimport {\r\n    Map,\r\n    Restaurants\r\n} from '../components';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport '../styles/homepage.scss';\r\n\r\nexport default function () {\r\n    const [restaurants, setRestaurants] = useState([]);\r\n    const [pagination, setPagination] = useState(null);\r\n    const [restaurantName, changeRestaurantName] = useState('');\r\n    const [userLocation, setLocation] = useState({ latitude: 23.7815222, longitude: 90.4004866 });\r\n    const [radius, setRadius] = useState(3000);\r\n   \r\n    useEffect(() => {\r\n\r\n        const findRestaurants = () => {\r\n            const service = new window.google.maps.places.PlacesService(document.getElementById('map'));\r\n            var request = {\r\n                location: {\r\n                    lat: userLocation.latitude,\r\n                    lng: userLocation.longitude,\r\n                },\r\n                radius: radius,\r\n                type: ['restaurant'],\r\n                // rankby: 'distance',\r\n                name: restaurantName\r\n            };\r\n            service.nearbySearch(request, (results, status, PlaceSearchPagination) => {\r\n                if (PlaceSearchPagination.hasNextPage) {\r\n                    setPagination(PlaceSearchPagination)\r\n                }\r\n                if (status === window.google.maps.places.PlacesServiceStatus.OK) {\r\n                    setRestaurants(results.map(({ id, icon, name, photos, price_level, rating, user_ratings_total, vicinity, geometry, opening_hours, reference }) => {\r\n                        return (\r\n                            {\r\n                                id,\r\n                                icon,\r\n                                name,\r\n                                photos: photos ? photos[0].getUrl() : null,\r\n                                price_level,\r\n                                rating,\r\n                                user_ratings_total,\r\n                                vicinity,\r\n                                reference,\r\n                                location: {\r\n                                    lat: geometry.location.lat(),\r\n                                    lng: geometry.location.lng(),\r\n                                },\r\n                                isOpen: opening_hours ? opening_hours.isOpen ? opening_hours.isOpen() : opening_hours.open_now : undefined\r\n                            }\r\n                        );\r\n                    }));\r\n                } else if (status === 'ZERO_RESULTS') {\r\n                    setRestaurants([]);\r\n                }\r\n            });\r\n\r\n        }\r\n        findRestaurants();\r\n    }, [userLocation, radius, restaurantName]);\r\n\r\n    const getCurrentLocation = () => {\r\n        if (navigator && navigator.geolocation) {\r\n            navigator.geolocation.getCurrentPosition(position => {\r\n                setLocation(position.coords);\r\n            });\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"home\">\r\n            <Map\r\n                userLocation={userLocation}\r\n                restaurants={restaurants}\r\n                getCurrentLocation={getCurrentLocation}\r\n                setLocation={setLocation}\r\n                radius={radius}\r\n            />\r\n            <div className=\"search-restaurants\">\r\n                <input type=\"text\" id=\"restaurant\" className=\"restaurants-search-input\" value={restaurantName} placeholder=\"Search Restaurants...\" onChange={event => changeRestaurantName(event.target.value)} />\r\n                <div className=\"radius-field\">\r\n                    <span className=\"label\">Distance</span>\r\n                    <input min={10} step={100} max={20000} id=\"radius\" type=\"range\" value={radius} onChange={e => setRadius(e.target.value)} />\r\n                    <span className=\"distance\">{(radius / 1000).toFixed(2)} km</span>\r\n                </div>\r\n            </div>\r\n            <div className=\"header\" >\r\n                <span className=\"restaurants\">  Available Restaurants  </span>\r\n                {(pagination && pagination.hasNextPage) && < span className=\"next-button\" onClick={() => pagination.nextPage()}>More Restaurants</span>}\r\n            </div>\r\n\r\n            <Restaurants restaurants={restaurants} userLocation={userLocation} />\r\n        </div >\r\n    );\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport Pages from './pages';\r\nfunction App() {\r\n  return (\r\n    <Pages />\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.0/8 are considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n      headers: { 'Service-Worker': 'script' }\r\n    })\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready.then(registration => {\r\n        registration.unregister();\r\n      });\r\n    }\r\n  }","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nserviceWorker.unregister();\r\n\r\n"],"sourceRoot":""}